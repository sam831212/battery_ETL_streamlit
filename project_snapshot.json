{
  "models": {
    "database.py:BaseModel": {
      "docstring": "Base model with common fields and methods",
      "attributes": [],
      "methods": [],
      "relationships": []
    },
    "database.py:CellChemistry": {
      "docstring": "Enum for cell chemistry types",
      "attributes": [
        "NMC",
        "LFP",
        "LTO",
        "OTHER"
      ],
      "methods": [],
      "relationships": [
        "NMC",
        "LFP",
        "LTO",
        "OTHER"
      ]
    },
    "database.py:CellFormFactor": {
      "docstring": "Enum for cell form factors",
      "attributes": [
        "PRISMATIC",
        "CYLINDRICAL",
        "POUCH",
        "OTHER"
      ],
      "methods": [],
      "relationships": [
        "PRISMATIC",
        "CYLINDRICAL",
        "POUCH",
        "OTHER"
      ]
    },
    "database.py:Cell": {
      "docstring": "Model representing a battery cell",
      "attributes": [
        "__table_args__"
      ],
      "methods": [],
      "relationships": [
        "__table_args__"
      ]
    },
    "database.py:Machine": {
      "docstring": "Model representing a testing machine",
      "attributes": [
        "__table_args__"
      ],
      "methods": [],
      "relationships": [
        "__table_args__"
      ]
    },
    "database.py:Experiment": {
      "docstring": "Model representing a battery test experiment",
      "attributes": [
        "__table_args__"
      ],
      "methods": [],
      "relationships": [
        "__table_args__"
      ]
    },
    "database.py:Step": {
      "docstring": "Model representing a test step within an experiment",
      "attributes": [
        "__table_args__"
      ],
      "methods": [],
      "relationships": [
        "__table_args__"
      ]
    },
    "database.py:Measurement": {
      "docstring": "Model representing detailed measurements within a step",
      "attributes": [
        "__table_args__"
      ],
      "methods": [],
      "relationships": [
        "__table_args__"
      ]
    },
    "database.py:ProcessedFile": {
      "docstring": "Model to track processed files to prevent duplicates",
      "attributes": [
        "__table_args__"
      ],
      "methods": [],
      "relationships": [
        "__table_args__"
      ]
    },
    "database.py:SavedView": {
      "docstring": "Model representing a saved dashboard configuration",
      "attributes": [
        "__table_args__"
      ],
      "methods": [],
      "relationships": [
        "__table_args__"
      ]
    }
  },
  "etl_functions": {
    "extraction.py:convert_numpy_types": {
      "signature": "convert_numpy_types(obj)",
      "docstring": "Convert numpy data types to Python native types for compatibility with database storage.\n    \n    Ar..."
    },
    "extraction.py:validate_csv_format": {
      "signature": "validate_csv_format(file_path, expected_headers)",
      "docstring": "Validate that a CSV file has the required headers.\n\n    Args:\n        file_path: Path to the CSV fil..."
    },
    "extraction.py:map_step_types": {
      "signature": "map_step_types(df, step_type_col)",
      "docstring": "Map step types to standardized categories (charge, discharge, rest).\n    Preserves original step typ..."
    },
    "extraction.py:calculate_file_hash": {
      "signature": "calculate_file_hash(file_path)",
      "docstring": "Calculate MD5 hash of a file for tracking processed files.\n\n    Args:\n        file_path: Path to the..."
    },
    "extraction.py:parse_step_csv": {
      "signature": "parse_step_csv(file_path)",
      "docstring": "Parse Step.csv file from ChromaLex format.\n\n    Args:\n        file_path: Path to the Step.csv file\n\n..."
    },
    "extraction.py:parse_detail_csv": {
      "signature": "parse_detail_csv(file_path)",
      "docstring": "Parse Detail.csv file from ChromaLex format.\n\n    Args:\n        file_path: Path to the Detail.csv fi..."
    },
    "extraction.py:load_and_preprocess_files": {
      "signature": "load_and_preprocess_files(step_file_path, detail_file_path, nominal_capacity, apply_transformations)",
      "docstring": "Load and preprocess both Step.csv and Detail.csv files.\n\n    Args:\n        step_file_path: Path to t..."
    },
    "transformation.py:calculate_c_rate": {
      "signature": "calculate_c_rate(current, nominal_capacity)",
      "docstring": "Calculate C-rate based on current and nominal capacity.\n\n    C-rate = |Current (A)| / Nominal Capaci..."
    },
    "transformation.py:calculate_soc": {
      "signature": "calculate_soc(steps_df, details_df, full_discharge_step_idx)",
      "docstring": "Calculate State of Charge (SOC) for all steps using Coulomb counting method.\n    \n    SOC calculatio..."
    },
    "transformation.py:extract_ocv_values": {
      "signature": "extract_ocv_values(steps_df)",
      "docstring": "Extract Open Circuit Voltage (OCV) values from rest steps.\n    \n    OCV is extracted from the voltag..."
    },
    "transformation.py:calculate_temperature_metrics": {
      "signature": "calculate_temperature_metrics(df, temp_column)",
      "docstring": "Calculate temperature statistics per step.\n    \n    Args:\n        df: DataFrame containing temperatu..."
    },
    "transformation.py:transform_data": {
      "signature": "transform_data(steps_df, details_df, nominal_capacity)",
      "docstring": "Apply all transformation functions to the step and detail data.\n    \n    Args:\n        steps_df: Dat..."
    },
    "validation.py:detect_voltage_anomalies": {
      "signature": "detect_voltage_anomalies(df, voltage_col, window_size, z_threshold)",
      "docstring": "Detect anomalies in voltage measurements using statistical methods.\n    \n    Args:\n        df: DataF..."
    },
    "validation.py:detect_capacity_anomalies": {
      "signature": "detect_capacity_anomalies(df, capacity_col, total_capacity_col, step_type_col, min_capacity_threshold, max_change_pct)",
      "docstring": "Detect anomalies in capacity measurements.\n    \n    Args:\n        df: DataFrame containing capacity ..."
    },
    "validation.py:detect_temperature_anomalies": {
      "signature": "detect_temperature_anomalies(df, temp_col, min_temp, max_temp, max_temp_change)",
      "docstring": "Detect anomalies in temperature measurements.\n    \n    Args:\n        df: DataFrame containing temper..."
    },
    "validation.py:validate_soc_range": {
      "signature": "validate_soc_range(df, tolerance)",
      "docstring": "Validate that State of Charge (SOC) values are within expected range\n\n    Args:\n        df: DataFram..."
    },
    "validation.py:validate_c_rate": {
      "signature": "validate_c_rate(df, max_c_rate)",
      "docstring": "Validate that C-rate values are within expected range\n\n    Args:\n        df: DataFrame containing c_..."
    },
    "validation.py:validate_data_continuity": {
      "signature": "validate_data_continuity(df, time_col, max_gap_seconds)",
      "docstring": "Validate data continuity (check for gaps in time series)\n\n    Args:\n        df: DataFrame containing..."
    },
    "validation.py:validate_value_jumps": {
      "signature": "validate_value_jumps(df, column, max_jump_percent)",
      "docstring": "Validate that there are no sudden jumps in values\n\n    Args:\n        df: DataFrame containing data\n ..."
    },
    "validation.py:generate_validation_report": {
      "signature": "generate_validation_report(df, step_type, detect_anomalies)",
      "docstring": "Generate a comprehensive validation report for battery data\n\n    Args:\n        df: DataFrame contain..."
    },
    "validation.py:generate_summary_table": {
      "signature": "generate_summary_table(selected_steps, include_stats, include_validation)",
      "docstring": "Generate a summary table with key statistics for selected steps.\n    \n    Args:\n        selected_ste..."
    }
  },
  "db_utils": {
    "database.py:create_db_and_tables": {
      "signature": "create_db_and_tables()",
      "docstring": "Create all tables defined in the models if they don't exist..."
    },
    "database.py:get_session": {
      "signature": "get_session()",
      "docstring": "Get a new database session\n\n    Returns:\n        Session: A new SQLite database session..."
    },
    "database.py:init_db": {
      "signature": "init_db(recreate_tables)",
      "docstring": "Initialize the SQLite database\n\n    Args:\n        recreate_tables: If True, will drop and recreate a..."
    },
    "database.py:test_db_connection": {
      "signature": "test_db_connection()",
      "docstring": "Test the SQLite database connection\n\n    Returns:\n        tuple[bool, Optional[str]]: (success, erro..."
    }
  },
  "migration_functions": {
    "env.py:run_migrations_offline": {
      "signature": "run_migrations_offline()",
      "docstring": "Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an En..."
    },
    "env.py:run_migrations_online": {
      "signature": "run_migrations_online()",
      "docstring": "Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate..."
    },
    "versions\\de227a3297e5_init_all_tables.py:upgrade": {
      "signature": "upgrade()",
      "docstring": "Upgrade schema...."
    },
    "versions\\de227a3297e5_init_all_tables.py:downgrade": {
      "signature": "downgrade()",
      "docstring": "Downgrade schema...."
    }
  },
  "ui_components": [
    "dashboard_page.py",
    "exp_meta_data_page.py",
    "preview_page.py",
    "settings_page.py",
    "step_selection_page.py",
    "__init__.py",
    "components\\meta_data_page\\data_display_ui.py",
    "components\\meta_data_page\\entity_management_ui.py",
    "components\\meta_data_page\\experiment_info_ui.py",
    "components\\meta_data_page\\file_handling_ui.py",
    "components\\meta_data_page\\selected_data_processing_ui.py",
    "components\\preview_page\\data_display_ui.py"
  ],
  "utils": [
    "config.py",
    "database.py",
    "data_helpers.py",
    "migration.py",
    "temp_files.py",
    "__init__.py"
  ],
  "visualization": [
    "battery_plots.py",
    "utils.py",
    "__init__.py"
  ]
}