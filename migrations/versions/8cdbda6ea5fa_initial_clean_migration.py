"""Initial clean migration

Revision ID: 8cdbda6ea5fa
Revises: 
Create Date: 2025-06-17 16:06:29.905553

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision: str = '8cdbda6ea5fa'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cell',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('manufacturer', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('chemistry', sa.Enum('NMC', 'LFP', 'LTO', 'SIB', 'OTHER', name='cellchemistry'), nullable=False),
    sa.Column('capacity', sa.Float(), nullable=True),
    sa.Column('form', sa.Enum('PRISMATIC', 'CYLINDRICAL', 'POUCH', 'OTHER', name='cellformfactor'), nullable=True),
    sa.Column('nominal_capacity', sa.Float(), nullable=True),
    sa.Column('nominal_voltage', sa.Float(), nullable=True),
    sa.Column('form_factor', sa.Enum('PRISMATIC', 'CYLINDRICAL', 'POUCH', 'OTHER', name='cellformfactor'), nullable=True),
    sa.Column('serial_number', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('date_received', sa.DateTime(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('machine',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('model_number', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('project',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_project_name'), 'project', ['name'], unique=False)
    op.create_table('experiment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('battery_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('nominal_capacity', sa.Float(), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('operator', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('cell_id', sa.Integer(), nullable=True),
    sa.Column('machine_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['cell_id'], ['cell.id'], ),
    sa.ForeignKeyConstraint(['machine_id'], ['machine.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_experiment_name'), 'experiment', ['name'], unique=False)
    op.create_table('step',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('experiment_id', sa.Integer(), nullable=False),
    sa.Column('data_meta', sa.JSON(), nullable=True),
    sa.Column('step_number', sa.Integer(), nullable=False),
    sa.Column('step_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('duration', sa.Float(), nullable=False),
    sa.Column('voltage_start', sa.Float(), nullable=True),
    sa.Column('voltage_end', sa.Float(), nullable=False),
    sa.Column('current', sa.Float(), nullable=False),
    sa.Column('capacity', sa.Float(), nullable=False),
    sa.Column('energy', sa.Float(), nullable=False),
    sa.Column('temperature_start', sa.Float(), nullable=True),
    sa.Column('temperature_end', sa.Float(), nullable=True),
    sa.Column('c_rate', sa.Float(), nullable=False),
    sa.Column('soc_start', sa.Float(), nullable=True),
    sa.Column('soc_end', sa.Float(), nullable=True),
    sa.Column('pre_test_rest_time', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['experiment_id'], ['experiment.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('measurement',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('step_id', sa.Integer(), nullable=False),
    sa.Column('execution_time', sa.Float(), nullable=False),
    sa.Column('voltage', sa.Float(), nullable=False),
    sa.Column('current', sa.Float(), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=False),
    sa.Column('capacity', sa.Float(), nullable=False),
    sa.Column('energy', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['step_id'], ['step.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('measurement')
    op.drop_table('step')
    op.drop_index(op.f('ix_experiment_name'), table_name='experiment')
    op.drop_table('experiment')
    op.drop_index(op.f('ix_project_name'), table_name='project')
    op.drop_table('project')
    op.drop_table('machine')
    op.drop_table('cell')
    # ### end Alembic commands ###
